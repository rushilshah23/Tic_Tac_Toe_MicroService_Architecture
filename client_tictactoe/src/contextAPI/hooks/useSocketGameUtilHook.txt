"use client";

import { useEffect, useRef } from "react";
import {
  SocketGameActionTypes,
  SocketGameActionTypesAsync,
  useSocketGameDispatch,
} from "../contexts/DispatchContexts/SocketGameDispatchContext";
import { useSocketGameContext } from "../contexts/StateContexts/SocketGameContext";

import { socketGameDispatchAsync } from "../reducers/socketGameReducer";
import { UserMove } from "@/types/UserMove.Interface";
import {
  SOCKET_CLIENT_EVENTS,
  SOCKET_CONSTANTS,
} from "@/configs/socket.config";
import { socketGameAPI } from "@/apiCalls/socket";
import { useSocketGameHook } from "./useSocketGameHook";

export const useSocketGameUtilHook = () => {
  const {hookInitialized} = useSocketGameHook()
  const socketGameContext = useSocketGameContext();
  const socketGameDispatch = useSocketGameDispatch();
  const renderRef2 = useRef(0);
  // Define functions which don't need initilialization

  const startHeartbeat = () => {
    // console.log("Heartbeat function invoked !");
    const HEARTBEAT_TIMEOUT = SOCKET_CONSTANTS.HEARTBEAT_TIMEOUT; // 5 seconds
    const HEARTBEAT_VALUE = SOCKET_CONSTANTS.HEARTBEAT_VALUE;
    if (!socketGameContext.socket) {
      return;
    }
    if (!!socketGameContext.socket.pingTimeout) {
      clearTimeout(socketGameContext.socket.pingTimeout);
    }

    socketGameContext.socket.pingTimeout = setTimeout(() => {
      socketGameContext.socket?.close();
      // Business logic to reconnect or not
    }, HEARTBEAT_TIMEOUT);

    const data = new Uint8Array(1);
    data[0] = HEARTBEAT_VALUE;
    socketGameContext.socket.send(data);
    console.log("Heart beated");
  };

  function isBinary(obj: any) {
    return (
      typeof obj === "object" &&
      Object.prototype.toString.call(obj) === "[object Blob]"
    );
  }

  // socketGameDispatchAsync({
  //   type:SocketGameActionTypesAsync.PLAY_MOVE,
  //   payload:
  // })
  const joinRoom = (roomId: string) => {
    if (
      !!socketGameContext.socket &&
      socketGameContext.socket.readyState === WebSocket.OPEN
    ) {
      const { socket } = socketGameContext;
      socketGameAPI.sendData(socket, SOCKET_CLIENT_EVENTS.JOIN_ROOM, {
        roomId,
      });
      socketGameDispatch({
        payload: { roomId: roomId },
        type: SocketGameActionTypes.JOIN_ROOM,
      });
      console.log("AFTER JOINING ROOM ", socketGameContext);
    }
  };2424

  const leaveRoom =
    // useCallback(
    () => {
      if (
        !!socketGameContext.socket &&
        socketGameContext.socket.readyState === WebSocket.OPEN
      ) {
        const { socket, roomId } = socketGameContext;
        if (roomId) {
          socketGameDispatch({
            payload: { roomId: roomId },
            type: SocketGameActionTypes.LEAVE_ROOM,
          });
          socketGameAPI.sendData(socket, SOCKET_CLIENT_EVENTS.LEAVE_ROOM, {
            roomId,
          });
          console.log("AFTER LEAVING ROOM ", socketGameContext);
        } else {
          socketGameDispatch({
            payload: {},
            type: SocketGameActionTypes.NULL_SOCKET,
          });
        }
      }
    };

  const sendMove = async (data: UserMove) => {
    await socketGameDispatchAsync(socketGameContext, {
      type: SocketGameActionTypesAsync.PLAY_MOVE,
      payload: {
        roomId: data.roomId,
        selectedCell: data.selectedCell,
      },
    }).then(() => {
      console.log("Data sent from send Move hook util function ");
    });
  };

  useEffect(() => {
    let subscribed = true;
            
    const openHandler = () => {
      console.log(
        "Heartbeat started"
        );
        startHeartbeat();
      };
      const closeHandler = () => {
        console.log("WebSocket connection closed - from InitFunction");
      if (socketGameContext.socket?.pingTimeout) {
        clearTimeout(socketGameContext.socket.pingTimeout);
      }
      leaveRoom();
    };
    const messageHandler = (msg: MessageEvent<string>) => {
      if (isBinary(msg.data)) {
        startHeartbeat();
      } else {
        console.log(`Received Non Binary message: ${msg.data}`);
      }
    };
    // if (!!socketGameContext.socket) {
      if (!!socketGameContext.socket && hookInitialized === true && subscribed === true) {
        socketGameContext.socket.onopen = () => {
          if (!!socketGameContext.socket) {

            
            if (subscribed && hookInitialized) {
              socketGameContext.socket.addEventListener("open", openHandler);
              socketGameContext.socket.addEventListener("close", closeHandler);
              socketGameContext.socket.addEventListener("message", messageHandler);

            renderRef2.current = renderRef2.current + 1;
            console.log(
              "Rendered useSocketUtilHook useEffect ",
              renderRef2.current,
              " times"
            );


          } else {
            console.log("Socket is still not intiialized in child socket hook ");
          }
        };
      }
    }
    // }, [startHeartbeat]);
  // }, [socketGameContext]);

  return () => {
    // Clear heartbeat timeout
    if (socketGameContext.socket && socketGameContext.socket.pingTimeout) {
      clearTimeout(socketGameContext.socket.pingTimeout);
      console.log("PING TIMEOUT CLEARED ")
      
      // Close socket connection
    }

      socketGameContext.socket?.removeEventListener("open", openHandler);
      socketGameContext.socket?.removeEventListener("close", closeHandler);
      socketGameContext.socket?.removeEventListener("message", messageHandler);
      subscribed = false;
      // if (socketConnection ) {
        // leaveRoom()
        // socketGameContext.socket?.close();
        // console.log("CONNECTION CLOSED !")
    // }
  };
  })

  return { sendMove, leaveRoom, joinRoom, socketGameContext };
};
